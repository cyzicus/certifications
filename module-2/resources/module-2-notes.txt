javaranch.com

*********************************************************
Module 2, Lesson 1
The two exceptions to normal {} variable scoping are simple for loops and method declaration
The for loop stated above does not need to have {}, so be careful:

for(i = 0; i < 100; i++)
	System.out.println(i);
System.out.println(i) !!!!!!!!!!! <= i is now out of scope

*********************************************************
Module 2, Lesson 2
You can only have one PUBLIC class or interface in each source file.
The public class name must match the source file name exactly (including capitalization)
The package name must match the directory the file is stored in exactly (also including capitalization)

A java class consists of three things: variables, methods, and constructors

Static vs. non-static

You cannot access a non-public class in a different package

*********************************************************
Module 2, Lesson 3

Part 1
public static void main(String[] args) can also be represented as
public static void main(String... args)
"args" is convention, but name could vary

Part 2
To run a java application from the command line, you need to use the following pattern: java MyProgram my arguments
"java" -> telling the operating system to run the JVM
"MyProgram" -> the fully qualified class name to run (package.Class)
"my arguments" -> corresponds to the String[] in main method

Part 3
"java -cp" tells java the classpath necessary for finding all necessary files for running the program

** Rewatch this lecture to understand the syntax for setting the classpath

Part 4
There are 3 ways of writing output using the Console object:
System.out (which is actually a PrintStream)

Be able to talk about the differences between println, print, and printf
Use of flush()
Default formatting of a float is 6 decimal places
Be able to talk about the different formatting options (%d, %f, etc)

System.out.append() returns a PrintWriter, so you can chain the results:

System.out.append("Hello,")
 			.append(" World!")
			.append('\n');
			
There is also an overloaded append() that allows you to select a subsequence (substring)

*********************************************************
Module 2, Lesson 4

Part 1
A package represents a group of related classes (called a namespace)

The import statement is only used for cleaning up your source code (as the compiled class will ALWAYS use the fully-qualified name)

Part 2
package comes first, but is optional
import statements come second, not required
code comes third (class, interface, etc)

Wildcard import statements cannot be used to get partial lists (CANNOT import only packages starting with the letter 'd' by using 'import a.d*'...this WILL NOT work)

If you had the following package structure a.b.MyClass and you did an import of a.*, you would NOT get anything from a.b (including MyClass)...these subpackages are just for organizational purposes and they are treated as completely separate packages.  To get MyClass imported, you would have to import a.b.*

An ambiguous import would occur if you imported both java.util.Date and java.sql.Date.  This can also occur if you import using the wildcard (grabbing java.util.* and java.sql.Date)

An import statement of a package/class takes precedence over natural hierarchy within the existing package.  For instance, if packageOne has a class called "Banana" and packageTwo has classes "Banana" and "Apple", if Apple imports packageOne and then tries to create a Banana object, it will be the banana from packageOne because it was specifically imported.  It will NOT reference the banana that is in its own package

*********************************************************
Module 2, Lesson 5

Part 1
Compiler produces platform-independent bytecode
Bytecode runs on any JVM
Bytecode interpretation is efficient
Compilation to bytecode avoids "understanding" of human-readable text at execution-time
JVM includes additional optimizations for more speed
JVM identifies of "hotspots" of frequently run code that is converted to native binary for the particular processor the program is running on

Part 2
Heap is the term to refer to the memory available for allocation
Hotel d'Heap analogy - you used to have to remember to return your hotel keys!

Part 3
Encapsulation - be able to give a definition

Good rules for encapsulation:
All variables are private (constants don't count)
Some methods are accessible
Methods protect internal state integrity

