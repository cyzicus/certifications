***********************************************
Module 3, Lesson 1.1

“int x, y, a, b;” is an acceptable way to declare multiple variables 

***********************************************
Module 3, Lesson 1.2

“int x=100, y=95, z=x-y;” is an acceptable way to declare and initialize variables

***********************************************
Module 3, Lesson 1.3

int = java type
Integer = whole number types that java supports

What are the four types of Integer types?
byte, short, int, and long

char type has integer/numeric properties (meaning you can do arithmetic on it)

byte - 8 bits (-128 to 127)
short - 16 bits (-32,768 to 32767)
int - 32 bits (-2,147,483,648 to 2,147,483,647)
long - 64 bits (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807)

even though each of these types is supposed to take up X bits, it may actually vary by operating system. 

char - 16 bits (0 to 65,535)

Integer literals can be written in the following forms:
decimal : (1234)
octal (base 8) : 077 (digits from 0-7 and start with 0)
hexadecimal (base 16) : 0xCAFEBABE (0-7 and A-F and start with 0x)
binary : 0b110010101111110 (0/1 and start with 0b)

What do you append to the literal to declare it a long? L

You can declare and initialize a variable with a literal of a different as long as:
1) it fits into the variable (short s = 1234; -> 1234 is an int)
2) it isn’t a long
3) 

You can use a separate AS LONG as it is between two numbers (can’t be at beginning, end, or after x in HEX, etc)

***********************************************
Module 3, Lesson 1.4

There are two types of floating point primitive types: float and double
float - 32 bits
double - 64 bits

Floating point numbers aren’t exact and will cause rounding errors from time to time

Because of this, its a bad idea to use floating point numbers for money. 

If you write a literal with a decimal, java will assume it to be a double

You can add D to literal to declare it as double
Apply an F to make a float

NaN represents an uncomputable result and (strangely enough) is not equal to itself

Positive and negative infinity exist in both the Double and Float types (4 total)

***********************************************
Module 3, Lesson 1.5

boolean - true and false 
Are not numbers like in other languages, so: “boolean bt = 1;” is NOT ALLOWED
However, computations ARE allowed, so: “boolean bf = (x != 0);” is OK

char - 16 bits (2 bytes)

Unicode char literals - backslash, u, then 4 character hex value
‘\uXXXX’

“u” is case-sensitive, but the hex value is not

“char \u559c = ‘\u559C’;” is totally valid

escape sequences:
\b backspace (character 08)
\t horizontal tab (character 09)
\n linefeed (character 0a)
\f formfeed (character 0c)
\r carriage return (character 0d)
\” double quote (character 22)
\’ single quote (character 27)
\\ backslash (character 5c)

You can also use octal to escape char values. Largest octal escape value is ‘\377’ (which is 255 decimal)

***********************************************
Module 3, Lesson 1.6

int x; // x is ALWAYS an int
the value of x, on the other hand can be cast into other types







