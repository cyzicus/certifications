javaranch.com

Module 2, Lesson 1
The two exceptions to normal {} variable scoping are simple for loops and method declaration
The for loop stated above does not need to have {}, so be careful:

for(i = 0; i < 100; i++)
	System.out.println(i);
System.out.println(i) !!!!!!!!!!! <= i is now out of scope

Module 2, Lesson 2
You can only have one PUBLIC class or interface in each source file.
The public class name must match the source file name exactly (including capitalization)
The package name must match the directory the file is stored in exactly (also including capitalization)

A java class consists of three things: variables, methods, and constructors

Static vs. non-static

You cannot access a non-public class in a different package

Module 2, Lesson 3

Part 1
public static void main(String[] args) can also be represented as
public static void main(String... args)
"args" is convention, but name could vary

Part 2
To run a java application from the command line, you need to use the following pattern: java MyProgram my arguments
"java" -> telling the operating system to run the JVM
"MyProgram" -> the fully qualified class name to run (package.Class)
"my arguments" -> corresponds to the String[] in main method

Part 3
"java -cp" tells java the classpath necessary for finding all necessary files for running the program

** Rewatch this lecture to understand the syntax for setting the classpath

Part 4
There are 3 ways of writing output using the Console object:
System.out (which is actually a PrintStream)

Be able to talk about the differences between println, print, and printf
Use of flush()
Default formatting of a float is 6 decimal places
Be able to talk about the different formatting options (%d, %f, etc)

System.out.append() returns a PrintWriter, so you can chain the results:

System.out.append("Hello,")
 			.append(" World!")
			.append('\n');
			
There is also an overloaded append() that allows you to select a subsequence (substring)

